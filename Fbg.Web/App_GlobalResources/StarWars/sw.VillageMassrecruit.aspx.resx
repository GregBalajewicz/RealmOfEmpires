<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Activate" xml:space="preserve">
    <value>Activate</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CitizenMilitia" xml:space="preserve">
    <value>Light Fighter</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Execution" xml:space="preserve">
    <value>Execution</value>
  </data>
  <data name="FAILED" xml:space="preserve">
    <value>FAILED</value>
  </data>
  <data name="HELP" xml:space="preserve">
    <value>HELP</value>
  </data>
  <data name="Infantry" xml:space="preserve">
    <value>Heavy Fighter</value>
  </data>
  <data name="Knight" xml:space="preserve">
    <value>Destroyer</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>last</value>
  </data>
  <data name="LightCavalry" xml:space="preserve">
    <value>Frigate</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>loading...</value>
  </data>
  <data name="MassRecruitAppliesToAllVills" xml:space="preserve">
    <value>Mass Recruit applies to all planets listed above, all pages</value>
  </data>
  <data name="MassRecruitment" xml:space="preserve">
    <value>Mass Recruitment</value>
  </data>
  <data name="MaxRecruitAmount" xml:space="preserve">
    <value>Max recruit amount to be specified</value>
  </data>
  <data name="MaxSpecifiedReached" xml:space="preserve">
    <value>max specifed reached</value>
  </data>
  <data name="NoFood" xml:space="preserve">
    <value>no energy</value>
  </data>
  <data name="NoRulesSelected" xml:space="preserve">
    <value>No rules selected</value>
  </data>
  <data name="NoSilver" xml:space="preserve">
    <value>no minerals</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="OnlyNumbersAllowed" xml:space="preserve">
    <value>Only numbers allowed</value>
  </data>
  <data name="PreviewMassRecruit" xml:space="preserve">
    <value>Preview mass recruit</value>
  </data>
  <data name="PreviewRecruitmentInVillages" xml:space="preserve">
    <value>Preview recruitment in {0} planets (recommended)</value>
  </data>
  <data name="PreviewWhatWouldHaveBeen" xml:space="preserve">
    <value>Preview - what would have been done if you ran the rules.</value>
  </data>
  <data name="Priority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="QuotesKeepBusy" xml:space="preserve">
    <value>"Keep Busy"</value>
  </data>
  <data name="Recruit" xml:space="preserve">
    <value>Recruit...</value>
  </data>
  <data name="RecruitInVillagesNow" xml:space="preserve">
    <value>Recruit in {0} planets now (cannot be un-done!)</value>
  </data>
  <data name="RecruitMaxOf" xml:space="preserve">
    <value>Recruit max of...</value>
  </data>
  <data name="RecruitThisAmount" xml:space="preserve">
    <value>recruit this amount</value>
  </data>
  <data name="RecruitUpTo" xml:space="preserve">
    <value>recruit up to</value>
  </data>
  <data name="RequirementsNotSatisfied" xml:space="preserve">
    <value>requirements not satisfied</value>
  </data>
  <data name="RuleSpecificDirectives" xml:space="preserve">
    <value>rule specific directives</value>
  </data>
  <data name="RuleType" xml:space="preserve">
    <value>Rule Type</value>
  </data>
  <data name="TheFollowingRulesBeExecuted" xml:space="preserve">
    <value>The following rules will be executed in this order:</value>
  </data>
  <data name="ValuesOneToThreeHundred" xml:space="preserve">
    <value>valid values between 1 and 300000</value>
  </data>
</root>